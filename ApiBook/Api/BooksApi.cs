/* 
 * Books
 *
 * JSON web API for Project Gutenberg ebook metadata
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using ApiBook.Client;
using ApiBook.Model;

namespace ApiBook.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IBooksApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Lists of Books
        /// </summary>
        /// <remarks>
        /// Lists of book
        /// </remarks>
        /// <exception cref="ApiBook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="authorYearStart"> (optional)</param>
        /// <param name="authorYearEnd"> (optional)</param>
        /// <param name="copyright"> (optional)</param>
        /// <param name="ids"> (optional)</param>
        /// <param name="languages"> (optional)</param>
        /// <returns>Books</returns>
        Books BooksGet (int? page = null, int? authorYearStart = null, int? authorYearEnd = null, bool? copyright = null, List<int?> ids = null, List<string> languages = null);

        /// <summary>
        /// Lists of Books
        /// </summary>
        /// <remarks>
        /// Lists of book
        /// </remarks>
        /// <exception cref="ApiBook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="authorYearStart"> (optional)</param>
        /// <param name="authorYearEnd"> (optional)</param>
        /// <param name="copyright"> (optional)</param>
        /// <param name="ids"> (optional)</param>
        /// <param name="languages"> (optional)</param>
        /// <returns>ApiResponse of Books</returns>
        ApiResponse<Books> BooksGetWithHttpInfo (int? page = null, int? authorYearStart = null, int? authorYearEnd = null, bool? copyright = null, List<int?> ids = null, List<string> languages = null);
        /// <summary>
        /// Book
        /// </summary>
        /// <remarks>
        /// Book
        /// </remarks>
        /// <exception cref="ApiBook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Book</returns>
        Book BooksIdGet (int? id);

        /// <summary>
        /// Book
        /// </summary>
        /// <remarks>
        /// Book
        /// </remarks>
        /// <exception cref="ApiBook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Book</returns>
        ApiResponse<Book> BooksIdGetWithHttpInfo (int? id);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Lists of Books
        /// </summary>
        /// <remarks>
        /// Lists of book
        /// </remarks>
        /// <exception cref="ApiBook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="authorYearStart"> (optional)</param>
        /// <param name="authorYearEnd"> (optional)</param>
        /// <param name="copyright"> (optional)</param>
        /// <param name="ids"> (optional)</param>
        /// <param name="languages"> (optional)</param>
        /// <returns>Task of Books</returns>
        System.Threading.Tasks.Task<Books> BooksGetAsync (int? page = null, int? authorYearStart = null, int? authorYearEnd = null, bool? copyright = null, List<int?> ids = null, List<string> languages = null);

        /// <summary>
        /// Lists of Books
        /// </summary>
        /// <remarks>
        /// Lists of book
        /// </remarks>
        /// <exception cref="ApiBook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="authorYearStart"> (optional)</param>
        /// <param name="authorYearEnd"> (optional)</param>
        /// <param name="copyright"> (optional)</param>
        /// <param name="ids"> (optional)</param>
        /// <param name="languages"> (optional)</param>
        /// <returns>Task of ApiResponse (Books)</returns>
        System.Threading.Tasks.Task<ApiResponse<Books>> BooksGetAsyncWithHttpInfo (int? page = null, int? authorYearStart = null, int? authorYearEnd = null, bool? copyright = null, List<int?> ids = null, List<string> languages = null);
        /// <summary>
        /// Book
        /// </summary>
        /// <remarks>
        /// Book
        /// </remarks>
        /// <exception cref="ApiBook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of Book</returns>
        System.Threading.Tasks.Task<Book> BooksIdGetAsync (int? id);

        /// <summary>
        /// Book
        /// </summary>
        /// <remarks>
        /// Book
        /// </remarks>
        /// <exception cref="ApiBook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (Book)</returns>
        System.Threading.Tasks.Task<ApiResponse<Book>> BooksIdGetAsyncWithHttpInfo (int? id);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class BooksApi : IBooksApi
    {
        private ApiBook.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BooksApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BooksApi(String basePath)
        {
            this.Configuration = new ApiBook.Client.Configuration { BasePath = basePath };

            ExceptionFactory = ApiBook.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BooksApi"/> class
        /// </summary>
        /// <returns></returns>
        public BooksApi()
        {
            this.Configuration = ApiBook.Client.Configuration.Default;

            ExceptionFactory = ApiBook.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BooksApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BooksApi(ApiBook.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = ApiBook.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = ApiBook.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ApiBook.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ApiBook.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Lists of Books Lists of book
        /// </summary>
        /// <exception cref="ApiBook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="authorYearStart"> (optional)</param>
        /// <param name="authorYearEnd"> (optional)</param>
        /// <param name="copyright"> (optional)</param>
        /// <param name="ids"> (optional)</param>
        /// <param name="languages"> (optional)</param>
        /// <returns>Books</returns>
        public Books BooksGet (int? page = null, int? authorYearStart = null, int? authorYearEnd = null, bool? copyright = null, List<int?> ids = null, List<string> languages = null)
        {
             ApiResponse<Books> localVarResponse = BooksGetWithHttpInfo(page, authorYearStart, authorYearEnd, copyright, ids, languages);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists of Books Lists of book
        /// </summary>
        /// <exception cref="ApiBook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="authorYearStart"> (optional)</param>
        /// <param name="authorYearEnd"> (optional)</param>
        /// <param name="copyright"> (optional)</param>
        /// <param name="ids"> (optional)</param>
        /// <param name="languages"> (optional)</param>
        /// <returns>ApiResponse of Books</returns>
        public ApiResponse< Books > BooksGetWithHttpInfo (int? page = null, int? authorYearStart = null, int? authorYearEnd = null, bool? copyright = null, List<int?> ids = null, List<string> languages = null)
        {

            var localVarPath = "/books";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (authorYearStart != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "author_year_start", authorYearStart)); // query parameter
            if (authorYearEnd != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "author_year_end", authorYearEnd)); // query parameter
            if (copyright != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "copyright", copyright)); // query parameter
            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "ids", ids)); // query parameter
            if (languages != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "languages", languages)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BooksGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Books>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Books) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Books)));
        }

        /// <summary>
        /// Lists of Books Lists of book
        /// </summary>
        /// <exception cref="ApiBook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="authorYearStart"> (optional)</param>
        /// <param name="authorYearEnd"> (optional)</param>
        /// <param name="copyright"> (optional)</param>
        /// <param name="ids"> (optional)</param>
        /// <param name="languages"> (optional)</param>
        /// <returns>Task of Books</returns>
        public async System.Threading.Tasks.Task<Books> BooksGetAsync (int? page = null, int? authorYearStart = null, int? authorYearEnd = null, bool? copyright = null, List<int?> ids = null, List<string> languages = null)
        {
             ApiResponse<Books> localVarResponse = await BooksGetAsyncWithHttpInfo(page, authorYearStart, authorYearEnd, copyright, ids, languages);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists of Books Lists of book
        /// </summary>
        /// <exception cref="ApiBook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="authorYearStart"> (optional)</param>
        /// <param name="authorYearEnd"> (optional)</param>
        /// <param name="copyright"> (optional)</param>
        /// <param name="ids"> (optional)</param>
        /// <param name="languages"> (optional)</param>
        /// <returns>Task of ApiResponse (Books)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Books>> BooksGetAsyncWithHttpInfo (int? page = null, int? authorYearStart = null, int? authorYearEnd = null, bool? copyright = null, List<int?> ids = null, List<string> languages = null)
        {

            var localVarPath = "/books";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (authorYearStart != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "author_year_start", authorYearStart)); // query parameter
            if (authorYearEnd != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "author_year_end", authorYearEnd)); // query parameter
            if (copyright != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "copyright", copyright)); // query parameter
            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "ids", ids)); // query parameter
            if (languages != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "languages", languages)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BooksGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Books>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Books) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Books)));
        }

        /// <summary>
        /// Book Book
        /// </summary>
        /// <exception cref="ApiBook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Book</returns>
        public Book BooksIdGet (int? id)
        {
             ApiResponse<Book> localVarResponse = BooksIdGetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Book Book
        /// </summary>
        /// <exception cref="ApiBook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Book</returns>
        public ApiResponse< Book > BooksIdGetWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BooksApi->BooksIdGet");

            var localVarPath = "/books/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BooksIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Book>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Book) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Book)));
        }

        /// <summary>
        /// Book Book
        /// </summary>
        /// <exception cref="ApiBook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of Book</returns>
        public async System.Threading.Tasks.Task<Book> BooksIdGetAsync (int? id)
        {
             ApiResponse<Book> localVarResponse = await BooksIdGetAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Book Book
        /// </summary>
        /// <exception cref="ApiBook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (Book)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Book>> BooksIdGetAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BooksApi->BooksIdGet");

            var localVarPath = "/books/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BooksIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Book>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Book) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Book)));
        }

    }
}
