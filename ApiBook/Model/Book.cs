/* 
 * Books
 *
 * JSON web API for Project Gutenberg ebook metadata
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ApiBook.Client.SwaggerDateConverter;

namespace ApiBook.Model
{
    /// <summary>
    /// Book
    /// </summary>
    [DataContract]
        public partial class Book :  IEquatable<Book>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Book" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="title">title.</param>
        /// <param name="authors">authors.</param>
        /// <param name="translators">translators.</param>
        /// <param name="subjects">subjects.</param>
        /// <param name="bookshelves">bookshelves.</param>
        /// <param name="languages">languages.</param>
        /// <param name="copyright">copyright.</param>
        /// <param name="mediaType">mediaType.</param>
        /// <param name="formats">formats.</param>
        public Book(int? id = default(int?), string title = default(string), List<Person> authors = default(List<Person>), List<Person> translators = default(List<Person>), List<string> subjects = default(List<string>), List<string> bookshelves = default(List<string>), List<string> languages = default(List<string>), bool? copyright = default(bool?), string mediaType = default(string), BookFormats formats = default(BookFormats))
        {
            this.Id = id;
            this.Title = title;
            this.Authors = authors;
            this.Translators = translators;
            this.Subjects = subjects;
            this.Bookshelves = bookshelves;
            this.Languages = languages;
            this.Copyright = copyright;
            this.MediaType = mediaType;
            this.Formats = formats;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets Authors
        /// </summary>
        [DataMember(Name="authors", EmitDefaultValue=false)]
        public List<Person> Authors { get; set; }

        /// <summary>
        /// Gets or Sets Translators
        /// </summary>
        [DataMember(Name="translators", EmitDefaultValue=false)]
        public List<Person> Translators { get; set; }

        /// <summary>
        /// Gets or Sets Subjects
        /// </summary>
        [DataMember(Name="subjects", EmitDefaultValue=false)]
        public List<string> Subjects { get; set; }

        /// <summary>
        /// Gets or Sets Bookshelves
        /// </summary>
        [DataMember(Name="bookshelves", EmitDefaultValue=false)]
        public List<string> Bookshelves { get; set; }

        /// <summary>
        /// Gets or Sets Languages
        /// </summary>
        [DataMember(Name="languages", EmitDefaultValue=false)]
        public List<string> Languages { get; set; }

        /// <summary>
        /// Gets or Sets Copyright
        /// </summary>
        [DataMember(Name="copyright", EmitDefaultValue=false)]
        public bool? Copyright { get; set; }

        /// <summary>
        /// Gets or Sets MediaType
        /// </summary>
        [DataMember(Name="media_type", EmitDefaultValue=false)]
        public string MediaType { get; set; }

        /// <summary>
        /// Gets or Sets Formats
        /// </summary>
        [DataMember(Name="formats", EmitDefaultValue=false)]
        public BookFormats Formats { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Book {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Authors: ").Append(Authors).Append("\n");
            sb.Append("  Translators: ").Append(Translators).Append("\n");
            sb.Append("  Subjects: ").Append(Subjects).Append("\n");
            sb.Append("  Bookshelves: ").Append(Bookshelves).Append("\n");
            sb.Append("  Languages: ").Append(Languages).Append("\n");
            sb.Append("  Copyright: ").Append(Copyright).Append("\n");
            sb.Append("  MediaType: ").Append(MediaType).Append("\n");
            sb.Append("  Formats: ").Append(Formats).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Book);
        }

        /// <summary>
        /// Returns true if Book instances are equal
        /// </summary>
        /// <param name="input">Instance of Book to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Book input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Authors == input.Authors ||
                    this.Authors != null &&
                    input.Authors != null &&
                    this.Authors.SequenceEqual(input.Authors)
                ) && 
                (
                    this.Translators == input.Translators ||
                    this.Translators != null &&
                    input.Translators != null &&
                    this.Translators.SequenceEqual(input.Translators)
                ) && 
                (
                    this.Subjects == input.Subjects ||
                    this.Subjects != null &&
                    input.Subjects != null &&
                    this.Subjects.SequenceEqual(input.Subjects)
                ) && 
                (
                    this.Bookshelves == input.Bookshelves ||
                    this.Bookshelves != null &&
                    input.Bookshelves != null &&
                    this.Bookshelves.SequenceEqual(input.Bookshelves)
                ) && 
                (
                    this.Languages == input.Languages ||
                    this.Languages != null &&
                    input.Languages != null &&
                    this.Languages.SequenceEqual(input.Languages)
                ) && 
                (
                    this.Copyright == input.Copyright ||
                    (this.Copyright != null &&
                    this.Copyright.Equals(input.Copyright))
                ) && 
                (
                    this.MediaType == input.MediaType ||
                    (this.MediaType != null &&
                    this.MediaType.Equals(input.MediaType))
                ) && 
                (
                    this.Formats == input.Formats ||
                    (this.Formats != null &&
                    this.Formats.Equals(input.Formats))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.Authors != null)
                    hashCode = hashCode * 59 + this.Authors.GetHashCode();
                if (this.Translators != null)
                    hashCode = hashCode * 59 + this.Translators.GetHashCode();
                if (this.Subjects != null)
                    hashCode = hashCode * 59 + this.Subjects.GetHashCode();
                if (this.Bookshelves != null)
                    hashCode = hashCode * 59 + this.Bookshelves.GetHashCode();
                if (this.Languages != null)
                    hashCode = hashCode * 59 + this.Languages.GetHashCode();
                if (this.Copyright != null)
                    hashCode = hashCode * 59 + this.Copyright.GetHashCode();
                if (this.MediaType != null)
                    hashCode = hashCode * 59 + this.MediaType.GetHashCode();
                if (this.Formats != null)
                    hashCode = hashCode * 59 + this.Formats.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
