/* 
 * Books
 *
 * JSON web API for Project Gutenberg ebook metadata
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ApiBook.Client.SwaggerDateConverter;

namespace ApiBook.Model
{
    /// <summary>
    /// BookFormats
    /// </summary>
    [DataContract]
        public partial class BookFormats :  IEquatable<BookFormats>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BookFormats" /> class.
        /// </summary>
        /// <param name="applicationxMobipocketEbook">applicationxMobipocketEbook.</param>
        /// <param name="applicationepubzip">applicationepubzip.</param>
        /// <param name="applicationrdfxml">applicationrdfxml.</param>
        /// <param name="textplainCharsetusAscii">textplainCharsetusAscii.</param>
        /// <param name="textplain">textplain.</param>
        /// <param name="imagejpeg">imagejpeg.</param>
        /// <param name="applicationzip">applicationzip.</param>
        /// <param name="texthtml">texthtml.</param>
        /// <param name="applicationoctetStream">applicationoctetStream.</param>
        /// <param name="downloadCount">downloadCount.</param>
        public BookFormats(string applicationxMobipocketEbook = default(string), string applicationepubzip = default(string), string applicationrdfxml = default(string), string textplainCharsetusAscii = default(string), string textplain = default(string), string imagejpeg = default(string), string applicationzip = default(string), string texthtml = default(string), string applicationoctetStream = default(string), int? downloadCount = default(int?))
        {
            this.ApplicationxMobipocketEbook = applicationxMobipocketEbook;
            this.Applicationepubzip = applicationepubzip;
            this.Applicationrdfxml = applicationrdfxml;
            this.TextplainCharsetusAscii = textplainCharsetusAscii;
            this.Textplain = textplain;
            this.Imagejpeg = imagejpeg;
            this.Applicationzip = applicationzip;
            this.Texthtml = texthtml;
            this.ApplicationoctetStream = applicationoctetStream;
            this.DownloadCount = downloadCount;
        }
        
        /// <summary>
        /// Gets or Sets ApplicationxMobipocketEbook
        /// </summary>
        [DataMember(Name="application/x-mobipocket-ebook", EmitDefaultValue=false)]
        public string ApplicationxMobipocketEbook { get; set; }

        /// <summary>
        /// Gets or Sets Applicationepubzip
        /// </summary>
        [DataMember(Name="application/epub+zip", EmitDefaultValue=false)]
        public string Applicationepubzip { get; set; }

        /// <summary>
        /// Gets or Sets Applicationrdfxml
        /// </summary>
        [DataMember(Name="application/rdf+xml", EmitDefaultValue=false)]
        public string Applicationrdfxml { get; set; }

        /// <summary>
        /// Gets or Sets TextplainCharsetusAscii
        /// </summary>
        [DataMember(Name="text/plain; charset&#x3D;us-ascii", EmitDefaultValue=false)]
        public string TextplainCharsetusAscii { get; set; }

        /// <summary>
        /// Gets or Sets Textplain
        /// </summary>
        [DataMember(Name="text/plain", EmitDefaultValue=false)]
        public string Textplain { get; set; }

        /// <summary>
        /// Gets or Sets Imagejpeg
        /// </summary>
        [DataMember(Name="image/jpeg", EmitDefaultValue=false)]
        public string Imagejpeg { get; set; }

        /// <summary>
        /// Gets or Sets Applicationzip
        /// </summary>
        [DataMember(Name="application/zip", EmitDefaultValue=false)]
        public string Applicationzip { get; set; }

        /// <summary>
        /// Gets or Sets Texthtml
        /// </summary>
        [DataMember(Name="text/html", EmitDefaultValue=false)]
        public string Texthtml { get; set; }

        /// <summary>
        /// Gets or Sets ApplicationoctetStream
        /// </summary>
        [DataMember(Name="application/octet-stream", EmitDefaultValue=false)]
        public string ApplicationoctetStream { get; set; }

        /// <summary>
        /// Gets or Sets DownloadCount
        /// </summary>
        [DataMember(Name="download_count", EmitDefaultValue=false)]
        public int? DownloadCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BookFormats {\n");
            sb.Append("  ApplicationxMobipocketEbook: ").Append(ApplicationxMobipocketEbook).Append("\n");
            sb.Append("  Applicationepubzip: ").Append(Applicationepubzip).Append("\n");
            sb.Append("  Applicationrdfxml: ").Append(Applicationrdfxml).Append("\n");
            sb.Append("  TextplainCharsetusAscii: ").Append(TextplainCharsetusAscii).Append("\n");
            sb.Append("  Textplain: ").Append(Textplain).Append("\n");
            sb.Append("  Imagejpeg: ").Append(Imagejpeg).Append("\n");
            sb.Append("  Applicationzip: ").Append(Applicationzip).Append("\n");
            sb.Append("  Texthtml: ").Append(Texthtml).Append("\n");
            sb.Append("  ApplicationoctetStream: ").Append(ApplicationoctetStream).Append("\n");
            sb.Append("  DownloadCount: ").Append(DownloadCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BookFormats);
        }

        /// <summary>
        /// Returns true if BookFormats instances are equal
        /// </summary>
        /// <param name="input">Instance of BookFormats to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BookFormats input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ApplicationxMobipocketEbook == input.ApplicationxMobipocketEbook ||
                    (this.ApplicationxMobipocketEbook != null &&
                    this.ApplicationxMobipocketEbook.Equals(input.ApplicationxMobipocketEbook))
                ) && 
                (
                    this.Applicationepubzip == input.Applicationepubzip ||
                    (this.Applicationepubzip != null &&
                    this.Applicationepubzip.Equals(input.Applicationepubzip))
                ) && 
                (
                    this.Applicationrdfxml == input.Applicationrdfxml ||
                    (this.Applicationrdfxml != null &&
                    this.Applicationrdfxml.Equals(input.Applicationrdfxml))
                ) && 
                (
                    this.TextplainCharsetusAscii == input.TextplainCharsetusAscii ||
                    (this.TextplainCharsetusAscii != null &&
                    this.TextplainCharsetusAscii.Equals(input.TextplainCharsetusAscii))
                ) && 
                (
                    this.Textplain == input.Textplain ||
                    (this.Textplain != null &&
                    this.Textplain.Equals(input.Textplain))
                ) && 
                (
                    this.Imagejpeg == input.Imagejpeg ||
                    (this.Imagejpeg != null &&
                    this.Imagejpeg.Equals(input.Imagejpeg))
                ) && 
                (
                    this.Applicationzip == input.Applicationzip ||
                    (this.Applicationzip != null &&
                    this.Applicationzip.Equals(input.Applicationzip))
                ) && 
                (
                    this.Texthtml == input.Texthtml ||
                    (this.Texthtml != null &&
                    this.Texthtml.Equals(input.Texthtml))
                ) && 
                (
                    this.ApplicationoctetStream == input.ApplicationoctetStream ||
                    (this.ApplicationoctetStream != null &&
                    this.ApplicationoctetStream.Equals(input.ApplicationoctetStream))
                ) && 
                (
                    this.DownloadCount == input.DownloadCount ||
                    (this.DownloadCount != null &&
                    this.DownloadCount.Equals(input.DownloadCount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ApplicationxMobipocketEbook != null)
                    hashCode = hashCode * 59 + this.ApplicationxMobipocketEbook.GetHashCode();
                if (this.Applicationepubzip != null)
                    hashCode = hashCode * 59 + this.Applicationepubzip.GetHashCode();
                if (this.Applicationrdfxml != null)
                    hashCode = hashCode * 59 + this.Applicationrdfxml.GetHashCode();
                if (this.TextplainCharsetusAscii != null)
                    hashCode = hashCode * 59 + this.TextplainCharsetusAscii.GetHashCode();
                if (this.Textplain != null)
                    hashCode = hashCode * 59 + this.Textplain.GetHashCode();
                if (this.Imagejpeg != null)
                    hashCode = hashCode * 59 + this.Imagejpeg.GetHashCode();
                if (this.Applicationzip != null)
                    hashCode = hashCode * 59 + this.Applicationzip.GetHashCode();
                if (this.Texthtml != null)
                    hashCode = hashCode * 59 + this.Texthtml.GetHashCode();
                if (this.ApplicationoctetStream != null)
                    hashCode = hashCode * 59 + this.ApplicationoctetStream.GetHashCode();
                if (this.DownloadCount != null)
                    hashCode = hashCode * 59 + this.DownloadCount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
