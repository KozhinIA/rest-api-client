/* 
 * Books
 *
 * JSON web API for Project Gutenberg ebook metadata
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ApiBook.Client.SwaggerDateConverter;

namespace ApiBook.Model
{
    /// <summary>
    /// Person
    /// </summary>
    [DataContract]
        public partial class Person :  IEquatable<Person>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Person" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="birthYear">birthYear.</param>
        /// <param name="deathYear">deathYear.</param>
        public Person(string name = default(string), int? birthYear = default(int?), int? deathYear = default(int?))
        {
            this.Name = name;
            this.BirthYear = birthYear;
            this.DeathYear = deathYear;
        }
        
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets BirthYear
        /// </summary>
        [DataMember(Name="birth_year", EmitDefaultValue=false)]
        public int? BirthYear { get; set; }

        /// <summary>
        /// Gets or Sets DeathYear
        /// </summary>
        [DataMember(Name="death_year", EmitDefaultValue=false)]
        public int? DeathYear { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Person {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  BirthYear: ").Append(BirthYear).Append("\n");
            sb.Append("  DeathYear: ").Append(DeathYear).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Person);
        }

        /// <summary>
        /// Returns true if Person instances are equal
        /// </summary>
        /// <param name="input">Instance of Person to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Person input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.BirthYear == input.BirthYear ||
                    (this.BirthYear != null &&
                    this.BirthYear.Equals(input.BirthYear))
                ) && 
                (
                    this.DeathYear == input.DeathYear ||
                    (this.DeathYear != null &&
                    this.DeathYear.Equals(input.DeathYear))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.BirthYear != null)
                    hashCode = hashCode * 59 + this.BirthYear.GetHashCode();
                if (this.DeathYear != null)
                    hashCode = hashCode * 59 + this.DeathYear.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
